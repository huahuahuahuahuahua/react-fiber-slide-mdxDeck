{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"76685a68c1bb3378e90c","result":{"data":{"deck":{"id":"144a629d-333c-5397-aa3a-2ea070b2d3f0","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar Split = makeShortcode(\"Split\");\nvar SplitRight = makeShortcode(\"SplitRight\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"React fiber \\u7B80\\u5355\\u4E86\\u89E3\")), mdx(\"h2\", null, \"React 16 Fiber \\u7684\\u7B80\\u5355\\u4E86\\u89E3\"), mdx(\"h6\", null, \"(\\u5185\\u5BB9\\u6D89\\u53CA\\u4E86 Stack reconciler\\uFF0CFiber reconciler\\uFF0C\\u4EE5\\u53CA\\u5B83\\u4EEC\\u4E4B\\u95F4\\u7684\\u533A\\u522B\\u3002)\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Animation Effect\"), mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(React.Fragment, null, \"15 Stack reconciler\", mdx(\"img\", {\n    style: {\n      width: \"500px\"\n    },\n    src: SmothReconciler\n  })), mdx(React.Fragment, null, \"16 Fiber reconciler\", mdx(\"img\", {\n    style: {\n      width: \"500px\"\n    },\n    src: SmothReconciler\n  }))), mdx(\"h6\", null, \"\\u4E24\\u8FB9\\u90FD\\u5F88\\u6D41\\u7545\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Animation Effect\"), mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(React.Fragment, null, \"15 Stack reconciler\", mdx(\"img\", {\n    style: {\n      width: \"600px\"\n    },\n    src: StackReconciler\n  })), mdx(React.Fragment, null, \"16 Fiber reconciler\", mdx(\"img\", {\n    style: {\n      width: \"600px\"\n    },\n    src: FiberReconciler\n  }))), mdx(\"h6\", null, mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u5DE6\\u8FB9\\u660E\\u663E\\u5361\\u987F\"), \"\\uFF0C\\u8FD9\\u662F\\u7531\\u4E8E\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u7F3A\\u4E4F\\u4F18\\u5148\\u7EA7\"), \"\\uFF0Ctable \\u53D8\\u5316\\u4E00\\u76F4\\u5360\\u7528\\u4E3B\\u7EBF\\u7A0B\\uFF0C\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u52A8\\u753B\\u65E0\\u6CD5\\u6B63\\u5E38\\u6E32\\u67D3\")), mdx(\"hr\", null), mdx(\"h3\", null, \"virtual dom\"), mdx(SplitRight, {\n    mdxType: \"SplitRight\"\n  }, mdx(\"img\", {\n    style: {\n      width: \"600px\",\n      height: \"550px\"\n    },\n    src: StackElement\n  }), mdx(\"h5\", null, \"react \\u4E2D\\uFF0C\\u4E00\\u4E2A \", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"virtual dom \"), \" \\u662F\\u4F7F\\u7528 element \\u6765\\u8868\\u793A\\u7684\\u3002\"), mdx(\"h6\", null, \"\\xA0\"), mdx(\"h5\", null, \"\\u5728 React15 Stack Reconciler \\u7B56\\u7565\\u4E2D\\uFF0CReact \\u91C7\\u7528\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u9012\\u5F52\"), \"\\u7684\\u65B9\\u5F0F\\u6765\\u751F\\u6210\\u6216\\u8005\\u66F4\\u65B0\\u5185\\u90E8\\u6811\\u3002\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2:4,5,11 file=./src/jsxdom.js title=\\\"DOM Elements\\\"\",\n    \"2:4,5,11\": true,\n    \"file\": \"./src/jsxdom.js\",\n    \"title\": \"\\\"DOM\",\n    \"Elements\\\"\": true\n  }), \"//Jsx && element\\u8282\\u70B9\\nexport const element = {\\n  type: \\\"button\\\",\\n  props: {\\n    className: \\\"button button-blue\\\",\\n    children: {\\n      type: \\\"b\\\",\\n      props: {\\n        children: \\\"OK!\\\",\\n      },\\n    },\\n  },\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1,3 file=./src/HTMLDOM.js title=\\\"HTML片段\\\"\",\n    \"1,3\": true,\n    \"file\": \"./src/HTMLDOM.js\",\n    \"title\": \"\\\"HTML片段\\\"\"\n  }), \"<button class=\\\"button button-blue\\\">\\n  <b>OK!</b>\\n</button>;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/jsxdom.js title=\\\"DOM Elements\\\"\",\n    \"file\": \"./src/jsxdom.js\",\n    \"title\": \"\\\"DOM\",\n    \"Elements\\\"\": true\n  }), \"//Jsx && element\\u8282\\u70B9\\nexport const element = {\\n  type: \\\"button\\\",\\n  props: {\\n    className: \\\"button button-blue\\\",\\n    children: {\\n      type: \\\"b\\\",\\n      props: {\\n        children: \\\"OK!\\\",\\n      },\\n    },\\n  },\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/HTMLDOM.js title=\\\"HTML片段\\\"\",\n    \"file\": \"./src/HTMLDOM.js\",\n    \"title\": \"\\\"HTML片段\\\"\"\n  }), \"<button class=\\\"button button-blue\\\">\\n  <b>OK!</b>\\n</button>;\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"15\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/StackReconciler.js title=\\\"React 15 栈协调更新机制（伪代码）\\\"\",\n    \"file\": \"./src/StackReconciler.js\",\n    \"title\": \"\\\"React\",\n    \"栈协调更新机制（伪代码）\\\"\": true\n  }), \"class InternalComponent {\\n  // \\u63A5\\u53D7\\u4E00\\u4E2A\\u7EC4\\u4EF6\\n  receiveComponent(nextElement) {\\n    var prevElement = this._currentElement;\\n    // \\u8C03\\u7528\\u51FD\\u6570\\u66F4\\u65B0\\u7EC4\\u4EF6\\n    this.updateComponent(prevElement, nextElement);\\n  }\\n  updateComponent(prevParentElement, nextParentElement) {\\n    // \\u66F4\\u65B0\\u5F53\\u524D\\u8282\\u70B9\\u7684props\\u548Cstate\\n    var prevProps = prevParentElement.props;\\n    var nextProps = nextParentElement.props;\\n    //\\u5C06setState\\u7684partialState\\u4E0E\\u539Fstate\\u5408\\u5E76\\n    var nextState = this._processPendingState(\\n      nextProps,\\n      nextContext\\n    );\\n    this._publicInstance.props = nextProps;\\n    this._publicInstance.state = nextState;\\n\\n    // \\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    var prevComponentInstance = this._renderedComponent;\\n    // \\u4E0A\\u6B21render\\u51FA\\u6765\\u7684element\\n    var prevRenderedElement =\\n      prevComponentInstance._currentElement;\\n    // \\u8C03\\u7528component \\u7684 render\\uFF0C\\u83B7\\u53D6\\u65B0\\u7684element\\n    var nextRenderedElement = this._publicInstance.render();\\n    // \\u5224\\u65AD\\u662F\\u5426\\u662F\\u4EC5\\u4EC5\\u9700\\u8981\\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    if (\\n      shouldUpdateReactComponent(\\n        prevRenderedElement,\\n        nextRenderedElement\\n      )\\n    ) {\\n      // \\u5B50\\u8282\\u70B9\\uFF0C\\u9012\\u5F52\\u8C03\\u7528receiveComponent\\n      prevComponentInstance.receiveComponent(\\n        nextRenderedElement\\n      );\\n    } else {\\n      // \\u5426\\u5219\\uFF0C\\u5378\\u8F7D\\u65E7\\u7684\\u5B50\\u8282\\u70B9\\uFF0C\\u7136\\u540E\\u8D70\\u65B0\\u5EFA\\u5B50\\u8282\\u70B9\\u6D41\\u7A0B\\n    }\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,3[2:18],5,6[4:25],8[2:18] file=./src/StackReconciler.js\",\n    \"2,3[2:18],5,6[4:25],8[2:18]\": true,\n    \"file\": \"./src/StackReconciler.js\"\n  }), \"class InternalComponent {\\n  // \\u63A5\\u53D7\\u4E00\\u4E2A\\u7EC4\\u4EF6\\n  receiveComponent(nextElement) {\\n    var prevElement = this._currentElement;\\n    // \\u8C03\\u7528\\u51FD\\u6570\\u66F4\\u65B0\\u7EC4\\u4EF6\\n    this.updateComponent(prevElement, nextElement);\\n  }\\n  updateComponent(prevParentElement, nextParentElement) {\\n    // \\u66F4\\u65B0\\u5F53\\u524D\\u8282\\u70B9\\u7684props\\u548Cstate\\n    var prevProps = prevParentElement.props;\\n    var nextProps = nextParentElement.props;\\n    //\\u5C06setState\\u7684partialState\\u4E0E\\u539Fstate\\u5408\\u5E76\\n    var nextState = this._processPendingState(\\n      nextProps,\\n      nextContext\\n    );\\n    this._publicInstance.props = nextProps;\\n    this._publicInstance.state = nextState;\\n\\n    // \\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    var prevComponentInstance = this._renderedComponent;\\n    // \\u4E0A\\u6B21render\\u51FA\\u6765\\u7684element\\n    var prevRenderedElement =\\n      prevComponentInstance._currentElement;\\n    // \\u8C03\\u7528component \\u7684 render\\uFF0C\\u83B7\\u53D6\\u65B0\\u7684element\\n    var nextRenderedElement = this._publicInstance.render();\\n    // \\u5224\\u65AD\\u662F\\u5426\\u662F\\u4EC5\\u4EC5\\u9700\\u8981\\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    if (\\n      shouldUpdateReactComponent(\\n        prevRenderedElement,\\n        nextRenderedElement\\n      )\\n    ) {\\n      // \\u5B50\\u8282\\u70B9\\uFF0C\\u9012\\u5F52\\u8C03\\u7528receiveComponent\\n      prevComponentInstance.receiveComponent(\\n        nextRenderedElement\\n      );\\n    } else {\\n      // \\u5426\\u5219\\uFF0C\\u5378\\u8F7D\\u65E7\\u7684\\u5B50\\u8282\\u70B9\\uFF0C\\u7136\\u540E\\u8D70\\u65B0\\u5EFA\\u5B50\\u8282\\u70B9\\u6D41\\u7A0B\\n    }\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"27:37,38[5] file=./src/StackReconciler.js\",\n    \"27:37,38[5]\": true,\n    \"file\": \"./src/StackReconciler.js\"\n  }), \"class InternalComponent {\\n  // \\u63A5\\u53D7\\u4E00\\u4E2A\\u7EC4\\u4EF6\\n  receiveComponent(nextElement) {\\n    var prevElement = this._currentElement;\\n    // \\u8C03\\u7528\\u51FD\\u6570\\u66F4\\u65B0\\u7EC4\\u4EF6\\n    this.updateComponent(prevElement, nextElement);\\n  }\\n  updateComponent(prevParentElement, nextParentElement) {\\n    // \\u66F4\\u65B0\\u5F53\\u524D\\u8282\\u70B9\\u7684props\\u548Cstate\\n    var prevProps = prevParentElement.props;\\n    var nextProps = nextParentElement.props;\\n    //\\u5C06setState\\u7684partialState\\u4E0E\\u539Fstate\\u5408\\u5E76\\n    var nextState = this._processPendingState(\\n      nextProps,\\n      nextContext\\n    );\\n    this._publicInstance.props = nextProps;\\n    this._publicInstance.state = nextState;\\n\\n    // \\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    var prevComponentInstance = this._renderedComponent;\\n    // \\u4E0A\\u6B21render\\u51FA\\u6765\\u7684element\\n    var prevRenderedElement =\\n      prevComponentInstance._currentElement;\\n    // \\u8C03\\u7528component \\u7684 render\\uFF0C\\u83B7\\u53D6\\u65B0\\u7684element\\n    var nextRenderedElement = this._publicInstance.render();\\n    // \\u5224\\u65AD\\u662F\\u5426\\u662F\\u4EC5\\u4EC5\\u9700\\u8981\\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    if (\\n      shouldUpdateReactComponent(\\n        prevRenderedElement,\\n        nextRenderedElement\\n      )\\n    ) {\\n      // \\u5B50\\u8282\\u70B9\\uFF0C\\u9012\\u5F52\\u8C03\\u7528receiveComponent\\n      prevComponentInstance.receiveComponent(\\n        nextRenderedElement\\n      );\\n    } else {\\n      // \\u5426\\u5219\\uFF0C\\u5378\\u8F7D\\u65E7\\u7684\\u5B50\\u8282\\u70B9\\uFF0C\\u7136\\u540E\\u8D70\\u65B0\\u5EFA\\u5B50\\u8282\\u70B9\\u6D41\\u7A0B\\n    }\\n  }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"15\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/StackReconciler.js title=\\\"React 15 栈协调更新机制（伪代码）\\\"  subtitle=\\\"基于递归的深度优先遍历进行更新组件\\\"\",\n    \"file\": \"./src/StackReconciler.js\",\n    \"title\": \"\\\"React\",\n    \"栈协调更新机制（伪代码）\\\"\": true,\n    \"\": true,\n    \"subtitle\": \"\\\"基于递归的深度优先遍历进行更新组件\\\"\"\n  }), \"class InternalComponent {\\n  // \\u63A5\\u53D7\\u4E00\\u4E2A\\u7EC4\\u4EF6\\n  receiveComponent(nextElement) {\\n    var prevElement = this._currentElement;\\n    // \\u8C03\\u7528\\u51FD\\u6570\\u66F4\\u65B0\\u7EC4\\u4EF6\\n    this.updateComponent(prevElement, nextElement);\\n  }\\n  updateComponent(prevParentElement, nextParentElement) {\\n    // \\u66F4\\u65B0\\u5F53\\u524D\\u8282\\u70B9\\u7684props\\u548Cstate\\n    var prevProps = prevParentElement.props;\\n    var nextProps = nextParentElement.props;\\n    //\\u5C06setState\\u7684partialState\\u4E0E\\u539Fstate\\u5408\\u5E76\\n    var nextState = this._processPendingState(\\n      nextProps,\\n      nextContext\\n    );\\n    this._publicInstance.props = nextProps;\\n    this._publicInstance.state = nextState;\\n\\n    // \\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    var prevComponentInstance = this._renderedComponent;\\n    // \\u4E0A\\u6B21render\\u51FA\\u6765\\u7684element\\n    var prevRenderedElement =\\n      prevComponentInstance._currentElement;\\n    // \\u8C03\\u7528component \\u7684 render\\uFF0C\\u83B7\\u53D6\\u65B0\\u7684element\\n    var nextRenderedElement = this._publicInstance.render();\\n    // \\u5224\\u65AD\\u662F\\u5426\\u662F\\u4EC5\\u4EC5\\u9700\\u8981\\u66F4\\u65B0\\u5B50\\u8282\\u70B9\\n    if (\\n      shouldUpdateReactComponent(\\n        prevRenderedElement,\\n        nextRenderedElement\\n      )\\n    ) {\\n      // \\u5B50\\u8282\\u70B9\\uFF0C\\u9012\\u5F52\\u8C03\\u7528receiveComponent\\n      prevComponentInstance.receiveComponent(\\n        nextRenderedElement\\n      );\\n    } else {\\n      // \\u5426\\u5219\\uFF0C\\u5378\\u8F7D\\u65E7\\u7684\\u5B50\\u8282\\u70B9\\uFF0C\\u7136\\u540E\\u8D70\\u65B0\\u5EFA\\u5B50\\u8282\\u70B9\\u6D41\\u7A0B\\n    }\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"React 15 stack Reconciler \\u7684\\u7F3A\\u70B9\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u5982\\u679C\\u5F53\\u524D\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u7EC4\\u4EF6\\u5C42\\u6B21\\u975E\\u5E38\\u6DF1\"), \"\\uFF0C\\u90A3\\u4E48\\u7EC4\\u4EF6\\u66F4\\u65B0\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u8017\\u65F6\\u975E\\u5E38\\u957F\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u5BF9\\u4E8E\\u52A8\\u753B\\u573A\\u666F\\u800C\\u8A00\\uFF0C\\u5982\\u679C\\u4E00\\u5E27\\u65F6\\u95F4\\u8D85\\u8FC7 16ms\\uFF0C\\u5C31\\u4F1A\\u51FA\\u73B0\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u6389\\u5E27\\uFF0C\\u52A8\\u753B\\u4E0D\\u6D41\\u7545\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u4F4E\\u4F18\\u5148\\u7EA7\\u7684\\u7EC4\\u4EF6\\uFF08\\u6BD4\\u5982\\u9690\\u85CF\\uFF0C\\u5C4F\\u5E55\\u5916\\uFF09\\uFF0C\\u4E5F\\u4F1A\\u5360\\u7528\\u66F4\\u65B0\\u8D44\\u6E90\\uFF0C\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u6CA1\\u6709\\u4F18\\u5148\\u7EA7\\u4E4B\\u5206\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"what is Fiber\"), mdx(\"h5\", null, \"Fiber \\u7684\\u4E2D\\u6587\\u7FFB\\u8BD1\\u53EB\", mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u7EA4\\u7A0B\\uFF0C\\u4E0E\\u8FDB\\u7A0B\\u3001\\u7EBF\\u7A0B\\u540C\\u4E3A\\u7A0B\\u5E8F\\u6267\\u884C\\u8FC7\\u7A0B\")), mdx(\"h3\", null, mdx(\"span\", {\n    style: {\n      color: \"#b37feb\"\n    }\n  }, \"\\u6BD4\\u7EBF\\u7A0B\\u8FD8\\u8981\\u7EA4\\u7EC6\"), \"\\u7684\\u4E00\\u4E2A\\u8FC7\\u7A0B\\u3002\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Fiber \\u7684\\u7ED3\\u6784\"), mdx(SplitRight, {\n    mdxType: \"SplitRight\"\n  }, mdx(\"img\", {\n    style: {\n      width: \"500px\",\n      height: \"500px\"\n    },\n    src: Fiber1\n  }), mdx(\"h5\", null, \"\\u76F8\\u8F83\\u4E8E\\u539F\\u5148\\u7684 stack node\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Fiber \\u7684\\u7ED3\\u6784\"), mdx(SplitRight, {\n    mdxType: \"SplitRight\"\n  }, mdx(\"img\", {\n    style: {\n      width: \"500px\",\n      height: \"500px\"\n    },\n    src: Fiber2\n  }), mdx(\"h5\", null, \"\\u76F8\\u8F83\\u4E8E\\u539F\\u5148\\u7684 stack node\"), mdx(\"h5\", null, \"\\u589E\\u52A0\\u4E86\"), mdx(\"h5\", null, mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u6307\\u5411\\u7236\\u6BCD\\u7684\\u7BAD\\u5934\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Fiber \\u7684\\u7ED3\\u6784\"), mdx(SplitRight, {\n    mdxType: \"SplitRight\"\n  }, mdx(\"img\", {\n    style: {\n      width: \"500px\",\n      height: \"500px\"\n    },\n    src: Fiber4\n  }), mdx(\"h5\", null, \"\\u76F8\\u8F83\\u4E8E\\u539F\\u5148\\u7684 stack node\"), mdx(\"h5\", null, \"\\u589E\\u52A0\\u4E86\"), mdx(\"h5\", null, \"\\u6307\\u5411\\u7236\\u6BCD\\u7684\\u7BAD\\u5934\"), mdx(\"h5\", null, mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\u6307\\u5411\\u5144\\u5F1F\\u59D0\\u59B9\\u7684\\u7BAD\\u5934\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Fiber \\u6838\\u5FC3\\u67B6\\u6784\\u53EF\\u4EE5\\u5206\\u4E3A\\u4E09\\u5C42\\uFF1A\"), mdx(\"h5\", null, mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"Scheduler \\u8C03\\u5EA6\\u5668 \"), \" - \\u8C03\\u5EA6\\u4EFB\\u52A1\\u7684\\u4F18\\u5148\\u7EA7\"), mdx(\"h5\", null, mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"Reconciler \\u534F\\u8C03\\u5668\"), \" - \\u8D1F\\u8D23\\u627E\\u51FA\\u53D8\\u5316\\u7684\\u7EC4\\u4EF6\"), mdx(\"h5\", null, mdx(\"span\", {\n    style: {\n      color: \"yellow\"\n    }\n  }, \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"Renderer \\u6E32\\u67D3\\u5668 \"), \" - \\u8D1F\\u8D23\\u5C06\\u53D8\\u5316\\u7684\\u7EC4\\u4EF6\\u6E32\\u67D3\\u5230\\u9875\\u9762\\u4E0A\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/allWork.js title=\\\"Fiber 更新流程（伪代码）\\\"\",\n    \"file\": \"./src/allWork.js\",\n    \"title\": \"\\\"Fiber\",\n    \"更新流程（伪代码）\\\"\": true\n  }), \"// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {}\\n//\\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\nrequestIdleCallback(workLoop);\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {}\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {}\\n//\\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1,2 title=\\\"Fiber 更新流程（伪代码）\\\"\",\n    \"1,2\": true,\n    \"title\": \"\\\"Fiber\",\n    \"更新流程（伪代码）\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3:6 title=\\\"Fiber 更新流程（伪代码）\\\"\",\n    \"3:6\": true,\n    \"title\": \"\\\"Fiber\",\n    \"更新流程（伪代码）\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7:10 title=\\\"Fiber 更新流程（伪代码）\\\"\",\n    \"7:10\": true,\n    \"title\": \"\\\"Fiber\",\n    \"更新流程（伪代码）\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/allWork.js title=\\\"Fiber 更新流程\\\"\",\n    \"file\": \"./src/allWork.js\",\n    \"title\": \"\\\"Fiber\",\n    \"更新流程\\\"\": true\n  }), \"// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {}\\n//\\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\nrequestIdleCallback(workLoop);\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {}\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {}\\n//\\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {}\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/schedule.js title=\\\"Fiber 更新流程（伪代码）\\\"\",\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"Fiber\",\n    \"更新流程（伪代码）\\\"\": true\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:16 file=./src/schedule.js title=\\\"调度器（伪代码）\\\"\",\n    \"1:16\": true,\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"调度器（伪代码）\\\"\"\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"18,19,21:27,33:35 file=./src/schedule.js title=\\\"根据优先级处理任务（伪代码）\\\"\",\n    \"18,19,21:27,33:35\": true,\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"根据优先级处理任务（伪代码）\\\"\"\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"37:50 file=./src/schedule.js title=\\\"构建 Fiber 树中每个 Fiber 的方法（伪代码）\\\"\",\n    \"37:50\": true,\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"构建\",\n    \"Fiber\": true,\n    \"树中每个\": true,\n    \"的方法（伪代码）\\\"\": true\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"52:69 file=./src/schedule.js title=\\\"调和子树（伪代码）\\\"\",\n    \"52:69\": true,\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"调和子树（伪代码）\\\"\"\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"19,28:32,35 file=./src/schedule.js title=\\\"更新视图（伪代码）\\\"\",\n    \"19,28:32,35\": true,\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"更新视图（伪代码）\\\"\"\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"71:76 file=./src/schedule.js title=\\\"更新视图（伪代码）\\\"\",\n    \"71:76\": true,\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"更新视图（伪代码）\\\"\"\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/schedule.js title=\\\"Fiber 更新流程（伪代码）\\\" subtitle=\\\"增加了任务优先级、时间片、任务中断\\\"\",\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"Fiber\",\n    \"更新流程（伪代码）\\\"\": true,\n    \"subtitle\": \"\\\"增加了任务优先级、时间片、任务中断\\\"\"\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"img\", {\n    width: 500,\n    height: 800,\n    style: {\n      display: \"table-cell\"\n    },\n    src: WorkLoop\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"19,20,35 file=./src/schedule.js title=\\\"Work Loop\\\"\",\n    \"19,20,35\": true,\n    \"file\": \"./src/schedule.js\",\n    \"title\": \"\\\"Work\",\n    \"Loop\\\"\": true\n  }), \"let timerQueue = [];\\n// \\u5B58\\u653E\\u4EFB\\u52A1\\u7684\\u961F\\u5217\\nlet taskQueue = [];\\nlet shouldYield = false;\\n// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {\\n  // \\u5411\\u961F\\u5217\\u4E2D\\u6DFB\\u52A0\\u4EFB\\u52A1\\n  taskQueue.push(task);\\n  // \\u4F18\\u5148\\u7EA7\\u5F71\\u54CD\\u5230\\u4EFB\\u52A1\\u5728\\u961F\\u5217\\u4E2D\\u7684\\u6392\\u5E8F\\uFF0C\\u5C06\\u4F18\\u5148\\u7EA7\\u6700\\u9AD8\\u7684\\u4EFB\\u52A1\\u6392\\u5728\\u6700\\u524D\\u9762\\n  taskQueue.sort((a, b) => a.priority - b.priority);\\n  // \\u4ECE\\u961F\\u5217\\u4E2D\\u53D6\\u51FA\\u4EFB\\u52A1\\n  const currentTask = taskQueue[0];\\n  nextUnitOfWork = currentTask;\\n  // \\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {\\n  console.log(\\\"workLoop\\\");\\n  const currentWork = nextUnitOfWork;\\n  //\\u6BCF\\u6B21\\u5FAA\\u73AF\\u90FD\\u4F1A\\u8C03\\u7528shouldYield\\u5224\\u65AD\\u5F53\\u524D\\u662F\\u5426\\u6709\\u5269\\u4F59\\u65F6\\u95F4\\u3002\\n  while (currentWork && !shouldYield) {\\n    // performUnitOfWork \\u662FDFS\\uFF08Depth-first search\\uFF09\\u904D\\u5386\\u8FC7\\u7A0B\\n    nextUnitOfWork = performUnitOfWork(currentWork);\\n    shouldYield = deadline.timeRemaining() < 1;\\n  }\\n  // \\u5982\\u679C\\u6CA1\\u6709\\u4E0B\\u4E2A\\u5355\\u5143\\u4EFB\\u52A1\\u548C\\u5DE5\\u4F5C\\u6811\\u5B58\\u5728\\n  if (!currentWork && wipRoot) {\\n    // \\u63D0\\u4EA4root\\u4EFB\\u52A1\\n    commitRoot();\\n  }\\n  //\\u8BF7\\u6C42\\u4E3B\\u7EBF\\u7A0B\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF;\\n  requestIdleCallback(workLoop);\\n}\\n\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {\\n  const isFunctionComponent =\\n    fiber.type instanceof Function;\\n  if (isFunctionComponent) {\\n    //\\u51FD\\u6570\\u7EC4\\u4EF6\\n    updateFunctionComponent(fiber);\\n  } else {\\n    //\\u7C7B\\u7EC4\\u4EF6\\n    updateHostComponent(fiber);\\n  }\\n  //\\u8C03\\u548C\\u5B50\\u6811\\n  reconcileChildren(fiber, children);\\n}\\n\\n// \\u5DE5\\u4F5C\\u6811\\nlet currentRoot = null;\\n// \\u865A\\u62DF\\u6811\\nlet wipRoot = null;\\n// \\u8C03\\u548C\\u5B50\\u6811\\nfunction reconcileChildren(fiber, children) {\\n  const sameType =\\n    oldFiber && element && element.type == oldFiber.type;\\n  if (sameType) {\\n    // TODO update the node\\n  }\\n  if (element && !sameType) {\\n    // TODO add this node\\n  }\\n  if (oldFiber && !sameType) {\\n    // TODO delete the oldFiber's node\\n  }\\n}\\n\\n// \\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {\\n  commitWork(wipRoot.child);\\n  currentRoot = wipRoot;\\n  wipRoot = null;\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/allWork.js title=\\\"Fiber 更新流程\\\" subtitle=\\\"请问大家有什么问题吗？（虽然我可能回答不了）\\\"\",\n    \"file\": \"./src/allWork.js\",\n    \"title\": \"\\\"Fiber\",\n    \"更新流程\\\"\": true,\n    \"subtitle\": \"\\\"请问大家有什么问题吗？（虽然我可能回答不了）\\\"\"\n  }), \"// \\u8C03\\u5EA6\\u5668\\nfunction scheduleCallback(task) {}\\n//\\u8BF7\\u6C42\\u7A7A\\u95F2\\u65F6\\u95F4\\u8FDB\\u884C\\u5DE5\\u4F5C\\u5FAA\\u73AF\\nrequestIdleCallback(workLoop);\\n//\\u6839\\u636E\\u4F18\\u5148\\u7EA7\\u5904\\u7406\\u4EFB\\u52A1\\nfunction workLoop(deadline) {}\\n//\\u6784\\u5EFA Fiber \\u6811\\u4E2D\\u6BCF\\u4E2A Fiber \\u7684\\u65B9\\u6CD5\\nfunction performUnitOfWork(fiber) {}\\n//\\u66F4\\u65B0\\u89C6\\u56FE\\nfunction commitRoot() {}\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"docs\\uFF1A\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesurfer.pomb.us\"\n  }), \"codesurfer.pomb.us\")), mdx(\"p\", null, \"\\u90E8\\u7F72\\u7F51\\u9875 page\\uFF1A\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://huawink.fun/\"\n  }), \"huawink.fun\")), mdx(\"p\", null, \"\\u53C2\\u8003\\u6587\\u6863\\uFF1A\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pomb.us/build-your-own-react/\"\n  }), \"build-your-own-react\")), mdx(\"p\", null, \"\\u6E90\\u4EE3\\u7801\\uFF1A\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/huahuahuahuahuahua/react-fiber-slide-mdxDeck.git\"\n  }), \"react-fiber-slide-mdxDeck\")), mdx(\"p\", null, \"ppt \\u6240\\u7528\\u5DE5\\u5177\\uFF1A\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/huahuahuahuahuahua/mdx-deck-slide-decks\"\n  }), \"mdx-deck-slide-decks\")), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u8C22\\u8C22\\u5927\\u5BB6\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"144a629d-333c-5397-aa3a-2ea070b2d3f0","slug":"","title":"React 16 Fiber 的简单了解"}}}